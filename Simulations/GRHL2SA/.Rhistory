"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\)"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "')'"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\)"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP"))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP"))
comp_mean <- Compositions %>%
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv")
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)"))
comp_mean <- Compositions %>%
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv")
View(Compositions)
comp_mean <- Compositions %>% select(contains("Mean")) %>%
gather(key = "Expression", value = "MeanComposition", -c(EMTLabel, CellTypeLabel)) %>%
mutate(Expression = str_remove(Expression, "Mean"))
comp_sd <- Compositions %>% select(contains("SD")) %>%
gather(key = "Expression", value = "SDComposition", -c(EMTLabel, CellTypeLabel))%>%
mutate(Expression = str_remove(Expression, "SD"))
comp_mean <- Compositions %>% select(contains("Mean"), EMTLabel) %>%
gather(key = "Expression", value = "MeanComposition", -c(EMTLabel)) %>%
mutate(Expression = str_remove(Expression, "Mean"))
comp_sd <- Compositions %>% select(contains("SD"), EMTLabel) %>%
gather(key = "Expression", value = "SDComposition", -c(EMTLabel))%>%
mutate(Expression = str_remove(Expression, "SD"))
comp_gat <- merge(comp_mean, comp_sd, by = c("EMTLabel", "CellTypeLabelType", "Expression"), all = T)
comp_gat <- merge(comp_mean, comp_sd, by = c("EMTLabel", "Expression"), all = T)
?geom_errorbar
knitr::opts_chunk$set(echo = TRUE)
options(stringsAsFactors = F)
library(tidyverse)
library(stringr)
plot_theme <- theme_bw() + theme(axis.text = element_text(family = "sans", face = "bold", size = 20, color = "black"),
axis.title = element_text(family = "sans", face = "bold", size = 23))
ggplot(comp_gat, aes(x = Expression, y = MeanComposition, color = EMTLabel)) + geom_line(size = 1.5) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_color_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = Expression, y = MeanComposition, color = EMTLabel, group = 1)) + geom_line(size = 1.5) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_color_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = Expression, y = MeanComposition, color = EMTLabel), group = 1) + geom_line(size = 1.5) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_color_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = Expression, y = MeanComposition, color = EMTLabel, group = EMTLabel)) + geom_line(size = 1.5) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_color_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = Expression, y = MeanComposition, color = EMTLabel, group = EMTLabel)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_color_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression, group = EMTLabel)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_fill_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_fill_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition), position = position_dodge()) +
scale_fill_viridis_d() + plot_theme
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition), position = position_dodge()) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45))
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition), position = position_dodge()) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)")) %>% mutate(is.numeric, funs(. / 100))
comp_sd <- Compositions %>% select(contains("SD"), EMTLabel) %>%
gather(key = "Expression", value = "SDComposition", -c(EMTLabel))%>%
mutate(Expression = str_remove(Expression, "SD"))
comp_gat <- merge(comp_mean, comp_sd, by = c("EMTLabel", "Expression"), all = T)
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)")) %>% mutate(is.numeric, funs(. / 100))
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)")) %>% mutate_if(is.numeric, funs(. / 100))
comp_mean <- Compositions %>% select(contains("Mean"), EMTLabel) %>%
gather(key = "Expression", value = "MeanComposition", -c(EMTLabel)) %>%
mutate(Expression = str_remove(Expression, "Mean"))
comp_sd <- Compositions %>% select(contains("SD"), EMTLabel) %>%
gather(key = "Expression", value = "SDComposition", -c(EMTLabel))%>%
mutate(Expression = str_remove(Expression, "SD"))
comp_gat <- merge(comp_mean, comp_sd, by = c("EMTLabel", "Expression"), all = T)
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition), position = position_dodge()) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(tumor_sizes)
CellTypes <- Compositions$EMTLabel
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv") %>% set_names(c("Week", rep(CellTypes, each = 5))) %>%
slice(-1)
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv") %>% set_names(c("Week", paste0(rep(CellTypes, each = 5), 1:5))) %>%
slice(-1)
View(tumor_sizes)
View(tumor_sizes)
i <- CellTypes[1]
tumor_sizes[[paste0("Mean",i)]] <- tumor_sizes %>% select(contains(i)) %>% mutate(Mean = apply(., 1, mean))
tumor_sizes[[paste0("Mean",i)]] <- tumor_sizes %>% select(contains(i)) %>% apply(1,mean)
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv") %>% set_names(c("Week", paste0(rep(CellTypes, each = 5),"_", 1:5))) %>%
slice(-1)
tumor_sizes %>% select(contains(i))
i
tumor_sizes[[paste0("Mean",i)]] <- tumor_sizes %>% select(contains(paste0(i, "_"))) %>% apply(1,mean)
View(tumor_sizes)
tumor_sizes$Parental_1
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv") %>% set_names(c("Week", paste0(rep(CellTypes, each = 5),"_", 1:5))) %>%
slice(-1) %>% mutate_all(as.numeric) %>% mutate(Week = 1:nrow(.))
tumor_sizes[is.na(tumor_sizes)] <- 0
Compositions <- read.csv("Copy of Ecad_vim.csv") %>% separate(1, into = c("EMT_label", "CellTypeLable"), sep = "\\(") %>%
set_names(c("EMTLabel", "CellTypeLabel", "MeanDN", "SDDN",
"MeanEcad", "SDEcad", "MeanVim", "SDVim", "MeanDP", "SDDP")) %>%
mutate(CellTypeLabel = str_remove(CellTypeLabel, "\\)")) %>% mutate_if(is.numeric, funs(. / 100))
comp_mean <- Compositions %>% select(contains("Mean"), EMTLabel) %>%
gather(key = "Expression", value = "MeanComposition", -c(EMTLabel)) %>%
mutate(Expression = str_remove(Expression, "Mean"))
comp_sd <- Compositions %>% select(contains("SD"), EMTLabel) %>%
gather(key = "Expression", value = "SDComposition", -c(EMTLabel))%>%
mutate(Expression = str_remove(Expression, "SD"))
comp_gat <- merge(comp_mean, comp_sd, by = c("EMTLabel", "Expression"), all = T)
ggplot(comp_gat, aes(x = EMTLabel, y = MeanComposition, fill = Expression)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition), position = position_dodge()) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
CellTypes <- Compositions$EMTLabel
tumor_sizes <- read.csv("Copy of Mouse_measurements.csv") %>% set_names(c("Week", paste0(rep(CellTypes, each = 5),"_", 1:5))) %>%
slice(-1) %>% mutate_all(as.numeric) %>% mutate(Week = 1:nrow(.))
tumor_sizes[is.na(tumor_sizes)] <- 0
for (i in CellTypes)
{
tumor_sizes[[paste0("Mean",i)]] <- tumor_sizes %>% select(contains(paste0(i, "_"))) %>% apply(1,mean)
tumor_sizes[[paste0("SD",i)]] <- tumor_sizes %>% select(contains(paste0(i, "_"))) %>% apply(1,sd)
}
tumor_means <- tumor_sizes %>% select(contains("Mean"), Week) %>%
gather(key = "EMTLabel", value = "MeanTumorSize", -Week) %>%
mutate(EMTLabel = str_remove(EMTLabel, "Mean"))
tumor_sd <- tumor_sizes %>% select(contains("SD"), Week) %>%
gather(key = "EMTLabel", value = "SDTumorSize", -Week)%>%
mutate(EMTLabel = str_remove(EMTLabel, "SD"))
tumor_gat <- merge(tumor_means, tumor_sd, by = c("Week", "EMTLabel"), all = T)
ggplot(tumor_gat, aes(x = Week, y = MeanTumorSize, color = EMTLabel, group = EMTLabel)) +
geom_line(size = 1) +
# geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanComposition - SDComposition, ymax = MeanComposition + SDComposition)) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(tumor_gat, aes(x = Week, y = MeanTumorSize, color = EMTLabel, group = EMTLabel)) +
geom_line(size = 1) +
# geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanTumorSize - SDTumorSize, ymax = MeanTumorSize + SDTumorSize)) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(tumor_gat, aes(x = Week, y = MeanTumorSize)) +
geom_line(size = 1) +
# geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = MeanTumorSize - SDTumorSize, ymax = MeanTumorSize + SDTumorSize)) +
scale_fill_viridis_d() + plot_theme + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_wrap(~EMTLabel, nrow = 3)
install.packages("genieclust")
install.packages("genieclust")
library(genieclust)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stringr)
library(gridExtra)
source("../plot_theme.R")
control_pd <- read.csv("Control Pedigree.txt")
control_anno <- read.csv("Control_Annotations.txt")
mono_pd <- read.csv("Carboplatin Pedigree_26_Mar.txt")
mono_anno <- read.csv("Carboplatin Annotations_26_Mar.txt")
comb_pd <- read.csv("Dmh1_Carbo_pedigree_26_Mar.txt")
comb_anno <- read.csv("Dmh1_Carbo_Annotations_26_mar.txt")
annoToPhase <- function(df_anno, df_pd){
nTracks <- ncol(df_anno)/2
phaseLengths <- sapply(1:nTracks, function(x){
lifeTime <- df_pd$Lifetime[df_pd$TrackID == x]
colz <- c(2*x-1, 2*x)
phases <- c("G1", "S", "G2", "M", "MS")
out <- c(TrackID = x,G1 = 0,S = 0,G2 = 0, M = 0, MS = 0)
df <- df_anno[, colz]
df <- df[complete.cases(df), ]
if (nrow(df) == 0 || !any(df[[2]] %in% phases))
return(c(ID = x,G1 = NA,S = NA,G2 = NA, M = NA, MS = NA))
phaseRows <- sapply(phases, function(phase){
rev(which(df[[2]] == phase))[1]
}) %>% na.omit
phasesPresent <- names(phaseRows)
phaseLengths <- sapply(1:length(phaseRows), function(r){
ed <- lifeTime
if(is.na(phaseRows[r]))
{
browser()
df
}
if(phaseRows[r] != nrow(df))
ed <- mean(df[phaseRows[r],1], df[(phaseRows[r]+1),1])
bg <- 0
if(r!=1)
bg <- mean(df[phaseRows[r-1],1], df[(phaseRows[r-1]+1),1])
ed-bg
})
out[phasesPresent] <- phaseLengths
out
}) %>% t %>% data.frame(stringsAsFactors = F)
}
df <- annoToPhase(control_anno, control_pd)
control <- merge(control_pd, df, by = "TrackID", all = T)
mono <- merge(mono_pd, annoToPhase(mono_anno, mono_pd), by = "TrackID", all = T)
comb <- merge(comb_pd, annoToPhase(comb_anno, comb_pd), by = "TrackID", all = T)
phaseLengthPlot <- function(df, name){
d <- df %>% select(TrackID, G1, S, G2, M, MS, Lifetime, Fate) %>% slice(df %>% select(G1,S,G2,M) %>% complete.cases %>% which) %>%
gather(key = "Phase", value = "Length", -c(TrackID, Lifetime, Fate))
d$Phase <- factor(d$Phase, levels = c("MS", "M", "G2", "S", "G1"))
d$Fate <- factor(d$Fate)
p_length <- ggplot(d, aes(x = reorder(TrackID, -Lifetime), y = Length, fill = Phase)) + geom_bar(stat = "identity", width = 1) + theme_Publication() +
theme(axis.text.x = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()) +
labs(x = "Cells", y = "Lifetime")
p_fate <- ggplot(d, aes(x = reorder(TrackID, -Lifetime), y = Length, fill = Fate)) + geom_bar(stat = "identity", width = 1) + theme_Publication() +
theme(axis.text.x = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.x = element_blank()) +
labs(x = "Cells", y = "Lifetime") + scale_fill_viridis_d()
grid.arrange(p_length, p_fate, ncol = 2, top = textGrob(name,gp=gpar(fontsize=rel(16), fontfamily="sans", fontface="bold")))
}
phaseLengthPlot(control, "Control")
phaseLengthPlot(mono, "Monotherapy")
phaseLengthPlot(comb, "Combination therapy")
devtools::install_github("askhari139/Teams")
install.packages("tidyverse")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("askhari139/Teams")
library(Teams)
install.packages("IQRtools",
repos = c("https://iqrtools.intiquan.com/rrepo","https://cran.r-project.org/"),
dependencies = TRUE)
install.packages("IQRtools",
repos = c("https://iqrtools.intiquan.com/rrepo","https://cran.r-project.org/"),
dependencies = TRUE, type = "source")
setwd("F:/Github/Projects/Ongoing/DSGRN/cleanVersion/ParameterSets/GRHL2SA")
source("F:/Github/Projects/Ongoing/DSGRN/cleanVersion/ParameterSets/GRHL2SA/plotter.r", echo=TRUE)
nListName <- "Large"
getwd()
setwd("..")
# browser()
nList <- nLists[[nListName]]
nets <- sapply(nList, function(x) {
paste0("GRHL_", x[1], "To", x[length(x)])
})
xLabs <- sapply(nList, function(x) {
if (length(x) == 1) {
as.character(x)
}
else {
paste0(x[1], "-", x[length(x)])
}
})
df  <- lapply(1:length(nList), function(i) {
nL <- nList[[i]]
net <- nets[[i]]
xLab <- xLabs[[i]]
setwd(net)
key <- str_remove(net, "GRHL_")
keys <- paste0(c("GRHL","GRHL1", "GRHL2"), "_",key)
jsdFils <- paste0(keys, "_JSDdata.csv")
jsdCompiled <- lapply(jsdFils, function(j) {
read_csv(j) %>% select(-RACIPE, -DSGRN, -Phase) %>% unique
}) %>% reduce(merge, by = c("Parameter","nState"), all = T)
jsdCompiled <- jsdCompiled %>%
zeroNa %>%
mutate(Avg = jsdCompiled %>% select(contains("JSD")) %>% apply(1, mean),
Std = jsdCompiled %>% select(contains("JSD")) %>% apply(1, sd),
HillRange = xLab) %>%
select(-contains("JSD"))
setwd("..")
jsdCompiled
}) %>%
reduce(rbind.data.frame) %>%
mutate(HillRange = factor(HillRange, levels = xLabs),
nState = as.character(nState))
nLIst
nList
i <- 1
nL <- nList[[i]]
net <- nets[[i]]
xLab <- xLabs[[i]]
getwd()
key <- str_remove(net, "GRHL_")
keys <- paste0(c("GRHL","GRHL1", "GRHL2"), "_",key)
jsdFils <- paste0(keys, "_JSDdata.csv")
jsdCompiled <- lapply(jsdFils, function(j) {
read_csv(j) %>% select(-RACIPE, -DSGRN, -Phase) %>% unique
}) %>% reduce(merge, by = c("Parameter","nState"), all = T)
View(jsdCompiled)
jsdCompiled <- jsdCompiled %>%
zeroNa %>%
mutate(Avg = jsdCompiled %>% select(contains("JSD")) %>% apply(1, mean),
Std = jsdCompiled %>% select(contains("JSD")) %>% apply(1, sd),
HillRange = xLab) %>%
select(-contains("JSD"))
jsdCompiled %>%
zeroNa
jsdCompiled[is.na(jsdCompiled)] <- 0
View(jsdCompiled)
getwd()
setwd("..")
df  <- lapply(1:length(nList), function(i) {
nL <- nList[[i]]
net <- nets[[i]]
xLab <- xLabs[[i]]
setwd(net)
key <- str_remove(net, "GRHL_")
keys <- paste0(c("GRHL","GRHL1", "GRHL2"), "_",key)
jsdFils <- paste0(keys, "_JSDdata.csv")
jsdCompiled <- lapply(jsdFils, function(j) {
read_csv(j) %>% select(-RACIPE, -DSGRN, -Phase) %>% unique
}) %>% reduce(merge, by = c("Parameter","nState"), all = T)
jsdCompiled <- jsdCompiled %>%
# zeroNa %>%
mutate(Avg = jsdCompiled %>% select(contains("JSD")) %>% apply(1, mean),
Std = jsdCompiled %>% select(contains("JSD")) %>% apply(1, sd),
HillRange = xLab) %>%
select(-contains("JSD"))
setwd("..")
jsdCompiled
}) %>%
reduce(rbind.data.frame) %>%
mutate(HillRange = factor(HillRange, levels = xLabs),
nState = as.character(nState))
dir.create(nListName)
setwd(nListName)
sapply(params, function(p) {
sapply(nStates, function(nSt) {
dfFil <- df %>% filter(Parameter == p, nState == nSt)
ggplot(dfFil, aes(x = HillRange, y = Avg)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_", nSt, ".png"), width = 5.5, height = 5)
})
dfFil <- df %>% filter(Parameter == p)
ggplot(dfFil %>% filter(nState %in% nStates), aes(x = HillRange, y = Avg, fill = nState)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std), position = position_dodge(width = 0.9)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_allN", ".png"), width = 5.5, height = 5)
})
setwd("F:/Github/Projects/Ongoing/DSGRN/cleanVersion/ParameterSets/GRHL2SA")
params <- c("Phase", "monoMulti", "nState")
nStates <- 1:4
nList1 <- list(c(1), 1:3, 2:3, 2:4, 3:5, 4:6, 5:7, 6:8, 7:9, 8:10, 9:11, 10:12)
nList2 <- lapply(seq(2, 50, 5), function(i) {
i:(i+9)
})
nList3 <- lapply(seq(1, 41, 10), function(i) {
i:(i+9)
})
nLists <- list(nList1, nList2, nList3, c(nList1, nList2, nList3))
names(nLists) <- c("SmallMat", "MediumMat", "LargeMat", "AllMat")
zeroNa <- function(d) {
d[is.na(df)] <- 0
d
}
sapply(names(nLists), function(nListName) {
# browser()
nList <- nLists[[nListName]]
nets <- sapply(nList, function(x) {
paste0("GRHL_", x[1], "To", x[length(x)])
})
xLabs <- sapply(nList, function(x) {
if (length(x) == 1) {
as.character(x)
}
else {
paste0(x[1], "-", x[length(x)])
}
})
df  <- lapply(1:length(nList), function(i) {
nL <- nList[[i]]
net <- nets[[i]]
xLab <- xLabs[[i]]
setwd(net)
key <- str_remove(net, "GRHL_")
keys <- paste0(c("GRHL","GRHL1", "GRHL2"), "_",key)
jsdFils <- paste0(keys, "_JSDdataMat.csv")
jsdCompiled <- lapply(jsdFils, function(j) {
read_csv(j) %>% select(-RACIPE, -DSGRN, -Phase) %>% unique
}) %>% reduce(merge, by = c("Parameter","nState"), all = T)
jsdCompiled <- jsdCompiled %>%
zeroNa %>%
mutate(Avg = jsdCompiled %>% select(contains("JSD")) %>% apply(1, mean),
Std = jsdCompiled %>% select(contains("JSD")) %>% apply(1, sd),
HillRange = xLab) %>%
select(-contains("JSD"))
setwd("..")
jsdCompiled
}) %>%
reduce(rbind.data.frame) %>%
mutate(HillRange = factor(HillRange, levels = xLabs),
nState = as.character(nState))
dir.create(nListName)
setwd(nListName)
sapply(params, function(p) {
sapply(nStates, function(nSt) {
dfFil <- df %>% filter(Parameter == p, nState == nSt)
ggplot(dfFil, aes(x = HillRange, y = Avg)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_", nSt, ".png"), width = 5.5, height = 5)
})
dfFil <- df %>% filter(Parameter == p)
ggplot(dfFil %>% filter(nState %in% nStates), aes(x = HillRange, y = Avg, fill = nState)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std), position = position_dodge(width = 0.9)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_allN", ".png"), width = 5.5, height = 5)
})
setwd("..")
write_csv(df, paste0("GRHL_", nListName, "_allData.csv"))
})
getwd()
setwd("..")
sapply(names(nLists), function(nListName) {
# browser()
nList <- nLists[[nListName]]
nets <- sapply(nList, function(x) {
paste0("GRHL_", x[1], "To", x[length(x)])
})
xLabs <- sapply(nList, function(x) {
if (length(x) == 1) {
as.character(x)
}
else {
paste0(x[1], "-", x[length(x)])
}
})
df  <- lapply(1:length(nList), function(i) {
nL <- nList[[i]]
net <- nets[[i]]
xLab <- xLabs[[i]]
setwd(net)
key <- str_remove(net, "GRHL_")
keys <- paste0(c("GRHL","GRHL1", "GRHL2"), "_",key)
jsdFils <- paste0(keys, "_JSDdataMat.csv")
jsdCompiled <- lapply(jsdFils, function(j) {
read_csv(j) %>% select(-RACIPE, -DSGRN, -Phase) %>% unique
}) %>% reduce(merge, by = c("Parameter","nState"), all = T)
jsdCompiled <- jsdCompiled %>%
# zeroNa %>%
mutate(Avg = jsdCompiled %>% select(contains("JSD")) %>% apply(1, mean),
Std = jsdCompiled %>% select(contains("JSD")) %>% apply(1, sd),
HillRange = xLab) %>%
select(-contains("JSD"))
setwd("..")
jsdCompiled
}) %>%
reduce(rbind.data.frame) %>%
mutate(HillRange = factor(HillRange, levels = xLabs),
nState = as.character(nState))
dir.create(nListName)
setwd(nListName)
sapply(params, function(p) {
sapply(nStates, function(nSt) {
dfFil <- df %>% filter(Parameter == p, nState == nSt)
ggplot(dfFil, aes(x = HillRange, y = Avg)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_", nSt, ".png"), width = 5.5, height = 5)
})
dfFil <- df %>% filter(Parameter == p)
ggplot(dfFil %>% filter(nState %in% nStates), aes(x = HillRange, y = Avg, fill = nState)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = Avg-Std, ymax = Avg+Std), position = position_dodge(width = 0.9)) +
theme_Publication() + labs(x = "Hill Range", y = "JSD") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
ggsave(paste0(nListName, "_", p, "_allN", ".png"), width = 5.5, height = 5)
})
setwd("..")
write_csv(df, paste0("GRHL_", nListName, "_allData.csv"))
})
